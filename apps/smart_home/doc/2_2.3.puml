@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' uncomment the following line and comment the first to use locally
' !include C4_Container.puml

' LAYOUT_TOP_DOWN()
' LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()

title Диаграмма компонента Partner device integration service экосистемы «Теплый дом»

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

Container(message_bus, "Message bus", "RabbitMQ", "Обрабатывает и направляет сообщения между сервисами")

System_Boundary(c1, "Partner device integration") {
    Component(integration_controller, "Integration Controller", "MVC Rest Controller", "Управление устройствами в системе")

    Container(message_bus, "Message bus", "RabbitMQ", "Обрабатывает и направляет сообщения между сервисами")

    Component(integration_with_partner_1, "Partner 1 component", "", "Уникальная логика для интеграции с партнером 1")
    Component(integration_with_partner_2, "Partner 2 component", "", "Уникальная логика для интеграции с партнером 2")
    Component(integration_with_partner_n, "Partner n component", "", "Уникальная логика для интеграции с партнером n")

}

ContainerDb(integration_db, "Integration database", "PostgreSQL 16.8", "Хранит общую информацию интеграции с партнерами, включен/выключен и тд", $tags = "storage")
ContainerDb(integration_with_partner_1_db, "Integration database", "PostgreSQL 16.8", "Хранит информацию необходимую для интеграции с партнером", $tags = "storage")
ContainerDb(integration_with_partner_2_db, "Integration database", "PostgreSQL 16.8", "Хранит информацию необходимую для интеграции с партнером", $tags = "storage")
ContainerDb(integration_with_partner_n_db, "Integration database", "PostgreSQL 16.8", "Хранит информацию необходимую для интеграции с партнером", $tags = "storage")


Rel(message_bus, integration_controller, "Отправляет сообщение", "async, JSON/HTTPS")

Rel(integration_controller, integration_db, "Записывает/читает данные")

Rel(integration_controller, integration_with_partner_1, "Использует", "async, JSON/HTTPS")
Rel(integration_controller, integration_with_partner_2, "Использует", "async, JSON/HTTPS")
Rel(integration_controller, integration_with_partner_n, "Использует", "async, JSON/HTTPS")

Rel( integration_with_partner_1,integration_with_partner_1_db, "Записывает/читает данные")
Rel( integration_with_partner_2,integration_with_partner_2_db, "Записывает/читает данные")
Rel( integration_with_partner_n,integration_with_partner_n_db, "Записывает/читает данные")


SHOW_LEGEND()
@enduml
